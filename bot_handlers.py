import telebot
from config import TOKEN
import keyboard
import data

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def hello(message):
    msg = bot.send_message(
        chat_id=message.chat.id,
        text='–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, ' + message.chat.first_name,
        reply_markup=keyboard.main_keyboard
    )


@bot.message_handler(commands=['help'])
def help(message):
    msg = bot.send_message(
        chat_id=message.chat.id,
        text='\U0000260E–î–ª—è –∑–≤\'—è–∑–∫—É –ø–∏—Å–∞—Ç–∏: @LoLKeKCkEkk'
    )


@bot.message_handler(commands=['pay'])
def pay(message):
    msg = bot.send_message(
        chat_id=message.chat.id,
        text='–î–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n5168 0010 1005 3507\n–í–µ–ª—å–º–∏ –≤–∞–º –¥—è–∫—É—éüòö'
    )


@bot.message_handler(commands=['notifications_on'])
def notifications_on(message):
    bot.send_message(
        chat_id=message.chat.id,
        text='–ù–∞—Ä–∞–∑—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.\n'
             '–©–æ–± –ø—Ä–∏—Å–≤–∏–¥—à–∏—Ç–∏ –≤–∏—Ö—ñ–¥ –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–∏–π –≤–Ω–µ—Å–æ–∫.\n'
             '–î–µ—Ç–∞–ª—ñ: /pay'
    )


@bot.message_handler(commands=['commands'])
def commands(message):
    bot.send_message(
        chat_id=message.chat.id,
        text='–ë–æ—Ç –º–∞—î —Ç–∞–∫—ñ –∫–æ–º–∞–¥–∏:'
             '\n/start'
             '\n/help'
             '\n/notifications_on'
    )


@bot.message_handler(content_types=['text'])
def step1(message):
    text = message.text.lower()

    if text == '–æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å':
        msg = bot.send_message(message.chat.id,
                               "–î—ñ–∑–Ω–∞—Ç–∏—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –≤—ñ–¥ Monobank",
                               reply_markup=keyboard.course_keyboard
                               )
        bot.register_next_step_handler(msg, process_coin_step)
    elif text == '–∫–æ–º–∞–Ω–¥–∏':
        commands(message)
    elif text == '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è':
        notifications_on(message)
    elif text == '–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è':
        bot.send_message(
            chat_id=message.chat.id,
            text='–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—ñ–±–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é',
            reply_markup=keyboard.exchange_menu,
        )
    else:
        msg = bot.send_message(
            chat_id=message.chat.id,
            text='–ù–µ –º–æ–∂—É —Ä–∞—Å–ø–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É!',
            reply_markup=keyboard.main_keyboard
        )


def process_coin_step(message):
    message.text = message.text[1:4]
    text = message.text.lower()
    bot.send_message(chat_id=message.chat.id,
                     text=data.course(text),
                     reply_markup=keyboard.main_keyboard
                     )


############
# grn to usd#
@bot.callback_query_handler(func=lambda call: call.data == 'uah_to_usd')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_usd_from_uah)


def get_usd_from_uah(msg):
    try:
        uah = float(msg.text)
        bot.send_message(msg.chat.id,
                         text=f'–ù–∞ {uah} –≥—Ä–∏–≤–µ–Ω—å –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.usd.exchange_from(uah)}$',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_usd_from_uah)


############
# grn to eur#
@bot.callback_query_handler(func=lambda call: call.data == 'uah_to_eur')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_eur_from_uah)


def get_eur_from_uah(msg):
    try:
        uah = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {uah} –≥—Ä–∏–≤–µ–Ω—å –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.eur.exchange_from(uah)}‚Ç¨',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_eur_from_uah)


############
# grn to rub#
@bot.callback_query_handler(func=lambda call: call.data == 'uah_to_rub')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_rub_from_uah)


def get_rub_from_uah(msg):
    try:
        uah = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {uah} –≥—Ä–∏–≤–µ–Ω—å –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.rub.exchange_from(uah)}‚ÇΩ',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_rub_from_uah)


############
# grn to pln#
@bot.callback_query_handler(func=lambda call: call.data == 'uah_to_pln')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_pln_from_uah)


def get_pln_from_uah(msg):
    try:
        uah = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {uah} –≥—Ä–∏–≤–µ–Ω—å –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.pln.exchange_from(uah)}z≈Ç',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_pln_from_uah)


############
# usd to grn#
@bot.callback_query_handler(func=lambda call: call.data == 'usd_to_uah')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –¥–æ–ª–∞—Ä–∞—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_uah_from_usd)


def get_uah_from_usd(msg):
    try:
        usd = float(msg.text)
        bot.send_message(msg.chat.id,
                         text=f'–ù–∞ {usd} –¥–æ–ª–∞—Ä—ñ–≤ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.usd.exchange_to(usd)}‚Ç¥',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_uah_from_usd)


############
# eur to grn#
@bot.callback_query_handler(func=lambda call: call.data == 'eur_to_uah')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ —î–≤—Ä–æ, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_uah_from_eur)


def get_uah_from_eur(msg):
    try:
        eur = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {eur} —î–≤—Ä–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.eur.exchange_to(eur)}‚Ç¥',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_uah_from_eur)


############
# rub to grn#
@bot.callback_query_handler(func=lambda call: call.data == 'rub_to_uah')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ —Ä—É–±–ª—è—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_uah_from_rub)


def get_uah_from_rub(msg):
    try:
        rub = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {rub} —Ä—É–±–ª—ñ–≤ –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.rub.exchange_to(rub)}‚Ç¥',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_uah_from_rub)


############
# pln to grn#
@bot.callback_query_handler(func=lambda call: call.data == 'pln_to_uah')
def step2(call):
    msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                text='–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤ –∑–ª–æ—Ç–∏—Ö, —è–∫—É —Ö–æ—á–µ—Ç–µ –æ–±–º—ñ–Ω—è—Ç–∏',
                                message_id=call.message.id,
                                )
    bot.register_next_step_handler(message=msg, callback=get_uah_from_pln)


def get_uah_from_pln(msg):
    try:
        pln = float(msg.text)
        bot.send_message(msg.chat.id, text=f'–ù–∞ {pln} –∑–ª–æ—Ç–∏—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ {data.pln.exchange_to(pln)}‚Ç¥',
                         reply_markup=keyboard.main_keyboard,
                         parse_mode="Markdown"
                         )
    except ValueError:
        msg = bot.send_message(chat_id=msg.chat.id,
                               text='–¢—Ä–µ–±–∞ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
                               )
        bot.register_next_step_handler(message=msg, callback=get_uah_from_pln)


bot.enable_save_next_step_handlers(delay=2)

bot.load_next_step_handlers()
